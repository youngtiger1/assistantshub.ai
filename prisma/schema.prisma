// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model ModelProvider {
  id        String      @id
  name      String
  Model     Model[]
  Assistant Assistant[]
}

model Model {
  id          String        @id
  name        String
  url         String?
  description String?
  providerId  String
  provider    ModelProvider @relation(fields: [providerId], references: [id])
  Assistant   Assistant[]
  features    Json?
}

model Organization {
  owner             String
  ownerType         String      @default("personal")
  openAIApiKey      String
  googleAIStudioKey String      @default("")
  groqCloudApiKey   String      @default("")
  anthropicApiKey   String      @default("")
  limitAssistants   Int         @default(2)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  Assistant         Assistant[]

  @@id([owner, ownerType])
}

model Assistant {
  id                    String         @id
  modelId               String?
  model                 Model?         @relation(fields: [modelId], references: [id])
  modelProviderId       String?
  modelProvider         ModelProvider? @relation(fields: [modelProviderId], references: [id])
  object                Json?
  organizationOwner     String?
  organizationOwnerType String?
  organization          Organization?  @relation(fields: [organizationOwner, organizationOwnerType], references: [owner, ownerType])
  avatar                String?
  profile               String?
  theme                 Json?
  created_at            DateTime       @default(now())
  updated_at            DateTime       @updatedAt
  Thread                Thread[]
  Folder                Folder[]
  File                  File[]
}

model Thread {
  id          String     @id
  object      Json?
  assistantId String?
  assistant   Assistant? @relation(fields: [assistantId], references: [id])
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  Message     Message[]
}

model Message {
  id         String   @id
  object     Json?
  threadId   String?
  thread     Thread?  @relation(fields: [threadId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Metric {
  id          String   @default(uuid())
  time        DateTime @default(now())
  assistantId String
  name        String
  value       Float
  tags        Json?

  @@unique([assistantId, name, time])
  @@index(fields: [time], map: "Metric_time_idx") // This is necessary because Prisma overrode the default index name by timescaledb
}

model Folder {
  id          String     @id
  name        String
  type        String?    @default("documents")
  object      Json?
  status      String?    @default("active")
  assistantId String
  assistant   Assistant? @relation(fields: [assistantId], references: [id])
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  File        File[]

  @@unique([assistantId, name])
}

model File {
  id               String     @id
  name             String
  originalFileName String
  type             String?
  size             Int?
  object           Json?
  folderId         String
  folder           Folder     @relation(fields: [folderId], references: [id])
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  Assistant        Assistant? @relation(fields: [assistantId], references: [id])
  assistantId      String?
}

// NextAuth.js schema
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
